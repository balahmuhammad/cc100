#+TITLE:Class Notes
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:Followup class notes for CSC100 Intro to Programming in C/C++ Spring 2022
#+STARTUP:overview hideblocks
#+OPTIONS: toc:nil num:nil ^:nil
* What is this?

  Instead of bugging you with emails, I opt to summarize my course
  observations regarding content, process, in this file. These often
  contain additional links, articles, and musings.

  I usually update it after each class - it also contains the homework
  (if any). The first point of call for any questions should be the
  FAQ. There are two FAQs - a [[https://github.com/birkenkrahe/org/blob/master/FAQ.org#frequently-asked-questions][general one]] (for all my courses), and a
  [[https://github.com/birkenkrahe/cc100/blob/main/FAQ.org][FAQ for CSC 100]].

  You find the whiteboard photos [[https://drive.google.com/drive/folders/177ILNWKMQo2I_KlvXA97rZmVJsqh0jYp?usp=sharing][here in GDrive]].

* w1s1 (01/12/22)
** Homework (until Friday, 14 Jan)

   (See [[https://lyon.schoology.com/assignment/5555682785][Schoology assignment]])

   * [[https://github.com][Create a GitHub account]]
   * [[https://docs.github.com/en/get-started/quickstart/hello-world][Complete the GitHub Hello World exercise]]
   * [[https://github.com/birkenkrahe/cc100/issues][Submit an issue to the ~cc100~ GitHub repo to confirm completion.]]

   Let me know if you encounter any problems. This shouldn't take more
   than 20 minutes of your time. Bring any questions that you may have
   with you to class!

   If you are in another one of my courses, you don't have to do the
   exercise again, but you should submit an issue for every course that
   you attend. When I receive the issue, I will close it and give you
   the points!

   Purpose of this exercise:
   * Engage with the GitHub software development platform
   * Understand how to submit issues (aka corrections, suggestions etc.)
   * Understand how software developers work in the cloud using the Git
     version control software

** Stuff

*** Finding your operating system

    Victor: On Windows, search for ~dxdiag~ ("DirectX Diagnostic
    Tool"). This is actually quite a large hammer for a small nail. On
    any computer, you should be able to enter ~About~ in the search
    field and get at least some information about your operating
    system (OS).

    The operating system is software on your computer that enables it
    to run other programs. You may imagine it as a system of roads to
    get you where you want to go.

*** Books

    I showed a few books that explain different aspects of C - because
    so many devices contain C! All of these are interesting, none are
    necessary (or even recommended) for beginners, and all are brand
    new - demonstrating the continued interest in C.

    #+attr_html: :width 200px
    #+caption: Numerical C by Philip Joyce (Apress, 2019)
    [[./img/joyce.png]]

    #+attr_html: :width 200px
    #+caption: Effective C by Robert C Seacord (NoStarch, 2020)
    [[./img/seacord.png]]

    #+attr_html: :width 200px
    #+caption: Modern C by Jens Gustedt (Manning, 2020)
    [[./img/gustedt.jpg]]

    #+attr_html: :width 200px
    #+caption: Raspberry Pi IoT in C by Henry Fairhead (I/O Press, 2016)
    [[./img/fairhead.jpg]]

*** Wrapper

    This term refers to the fact that not all software runs on all
    operating systems (OS). One way of running "alien" software on
    your OS is to "wrap" it - same thing that a (bacterial) vaccine
    does: your OS then thinks it deals with something it knows.

    My examples (for Windows only) were:
    1) "cygwin", which is a bundle of Linux services, wrapped up to
       run under Windows. Cool app, actually. [[https://cygwin.com/install.html][See here for the easy
       download and installation]] (just download and run the file
       ~setup-x86_64.exe~. It's one quick way of getting a C
       compiler - a program that can translate your C programs so that
       they run on your computer.
    2) "ubuntu linux app" - This is a wrapper for a complete Linux
       system for Windows. [[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-can-i-install-linux-under-windows-10][See this FAQ]] for how to install it on your
       computer (worth doing). It's another way to get a C compiler.

*** [[https://en.wikipedia.org/wiki/Library_(computing)][(Software) library of functions]]

    #+attr_html: :width 500px
    #+caption: Library (Source: Unsplash)
    [[./img/library.jpg]]

*** Command-line interface

    Aka CLI, terminal, command line, or shell. Linux nerds and hackers
    thrive on the command line, and so will you, via this course.

    Some live "[[https://www.linuxjournal.com/content/without-gui-how-live-entirely-terminal][entirely in a terminal]]" ([[lunduke][Lunduke, 2019]]).

    #+attr_html: :width 500px
    #+caption: the other kind of shell (Source: Unsplash)
    [[./img/shell.jpg]]

*** Literate programming = doc + code + output

    There isn't that much more to it. We'll use GNU Emacs Org-mode as
    interactive notebook environment, and also to develop, run and
    debug C code.

    You can find more information about literate programming, and
    plenty of links [[https://en.wikipedia.org/wiki/Literate_programming][at Wikipedia]].

    I have just made a screencast to show the difference between shell
    and notebooks, not using C but the database query language SQLite
    instead ([[birkenkrahe][Birkenkrahe, 2022]]). [[https://youtu.be/8HJGz3IYoHI][Check it out]].

* w1s2 (01/14/22)

  * TIOBE = "[[https://en.wikipedia.org/wiki/The_Importance_of_Being_Earnest][The Importance of Being Earnest]]" - play by Oscar Wilde
    (1895).
  * Weekly quiz: review of last week's content. After the first play,
    the quiz will be opened for unlimited playing and can be used to
    prepare for the final exam (whose questions are sourced from the
    quiz).
  * Algorithms vs heuristics - heuristics is a human behavioral domain
    and leads to more resilient processes.
  * The "[[https://en.wikipedia.org/wiki/Kernel_(operating_system)][kernel]]" is the core of an operating system. E.g. the Linux kernel.
  * COBOL is a compiled language used mainly in finance and business
    since the late 1950s. It mainly runs on mainframes (very large
    computers). To be able to understand, and fix COBOL programs has
    become a rare skill since the language is rarely taught. [[https://www.mainframestechhelp.com/tutorials/cobol/][Here is a
    free tutorial]].

* w2s3 (01/19/22)

** Quiz feedback discussion

   * Timing - 15 OK
   * Content - no questions
   * Schedule - weekly quiz as a recap of last week
   * Grading - unlimited attempts after the first play (in class)

** Captain's Log

   * If you miss a class and would like it recorded, notify me
     beforehand. I will do my best to create a recording, which will
     then be uploaded to GDrive ([[https://lyon.schoology.com/link?a=&path=https%3A%2F%2Fdrive.google.com%2Fdrive%2Ffolders%2F12abr-xo1Kbd5F-0zLRq_2KYbsCULHidL%3Fusp%3Dsharing][link in Schoology]])

   * Whiteboard screenshots taken after class will be uploaded in
     GDrive as well ([[https://lyon.schoology.com/link?a=&path=https%3A%2F%2Fdrive.google.com%2Fdrive%2Ffolders%2F177ILNWKMQo2I_KlvXA97rZmVJsqh0jYp%3Fusp%3Dsharing][link in Schoology]]). You can submit GitHub issues
     if you have questions, additions, etc

   * If you miss a class, check content planned/covered through the
     files ~agenda.org~ and ~notes.org~ [[https://github.com/birkenkrahe/cc100][in the GitHub repo]].

   * You can add your GitHub skills to your resume and it might help
     you when you try to get a job or an internship!

   * This class will be offered in the Summer I program (June
     2022). Same content and format, and likely better than this first
     version (because I'll have learnt how to do it better).

   * My challenge: why should a liberal arts major (e.g. political
     science) learn to program, and especially in C?
     - "Meet The Newest Liberal Art: Coding" ([[<<koenig>>][Koenig, 2020]])
     - Greater employability is a general, traditional reason
     - Coding can be fun. Kids know this.
     - Data and computer literacy is a life and a professional
       skill. Especially for political science/economics, see the
       Economist newletter "[[https://view.e.economist.com/?qs=656e8edd261819ad127632bd9fc89d2693ab5b810851ce4bd3c9b136783bf9a66449c77fa31064988ea46b682a0e8efeb56fca106d505a3dcf51d920dc5bcf1b6f2e2e72407034bde705c7cfc6af5ec4][Off the charts]]" ([[segger][Segger, 2022]]).

       #+caption: Plots from The Economist
       #+attr_html: :width 500px
       [[./img/graph.jpg]]

   * [[https://en.wikipedia.org/wiki/Object-oriented_programming][Object-Oriented Programming (OOP)]] is a specialty of C++ over
     C. Other modern languages share this paradigm (which is
     conceptually quite difficult): Java, Python, R, are examples. OOP
     is useful in the world especially for *reuse* of code, and it
     makes maintaining large code repositories easier. Our
     introduction to C++ at the end of the introductory class will
     include a short tour of OOP, too.

   * Glossaries are like dictionaries of important words. Knowing
     words and definitions can help you learn new things much more
     quickly and easily. I know whereof I speak - at this stage of my
     life, I learn new things really quickly because I have such a
     large - not necessarily deep - foundation of technical terms (and
     thereby, concepts). Don't neglect your learning of (new) words!

* w2s4 (01/21/22)

  #+caption: GCC logo
  #+attr_html: :width 200px
  [[./img/gcc.png]]

  * Installed GCC, the compiler. For instructions, [[https://github.com/birkenkrahe/org/blob/master/emacs/install.org][see here]].
  * After the installation, you have to set the ~PATH~ to the compiler
    so that it can be found.
  * You can test the successful installation in the terminal (Windows
    CMD prompt) with the command ~gcc --version~.
  * The documentation to this important, large (with > 10 mio lines of
    source code) software program is massive ([[https://gcc.gnu.org/onlinedocs/gcc.pdf][PDF]] - [[stallman][Stallman 2022]]),
    though there are also shorter introductions, if you're interested,
    [[https://tfetimes.com/wp-content/uploads/2015/09/An_Introduction_to_GCC-Brian_Gough.pdf][like this one]] ([[gough][Gough, 2014]]).

* w3s5 (01/24/22)

  What you learnt using the instructions from [[https://github.com/birkenkrahe/org/blob/master/emacs/tutor.org][tutor.org]]:
  - Open, shut or suspend Emacs
  - Open the Emacs tutorial
  - Read a file into Emacs

    These are the skills you need to complete the [[https://lyon.schoology.com/assignment/5598737597][assignment]] (for
    extra credit until Wednesday 11 AM - for all others we'll do this
    in class).

    Here is the Emacs documentation on the initialization file
    ~.emacs~ in the GNU Emacs manual: "[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Init.html][How Emacs finds your init
    file]]".

* w3s6 (01/26/22)

  * Fixed the ~.emacs~ problem - this file must be located in the
    directory that you find in Emacs with ~~/~. (See [[https://lyon.schoology.com/assignment/5598737597/info][instruction]].)

  * Started the [[https://github.com/birkenkrahe/cc100/tree/main/assignments/org-mode][Org-mode exercise]]. Will finish it on Friday. Then you
    can run C code inside Emacs as an Integrated Development
    Environment (IDE).

* w3s7 (01/28/22)

  * Explanation of the Org-mode C code block header arguments:

    | HEADER ARGUMENT     | MEANING                                                |
    |---------------------+--------------------------------------------------------|
    | ~:main yes~         | wrap ~puts~ statement in ~int main(void) { }~ function |
    | ~:includes stdio.h~ | include standard input/output header file              |
    | ~:tangle first.c~   | export source code as C file ~first.c~  ("tangle")     |
    | ~:exports both~     | both result and source code will be exported           |
    | ~:comments both~    | link source code and org files, add comments to source |
    | ~:results raw~      | insert output directly in org format into org file     |

  * Something you may have noticed in the GitHub issue submissions of
    your resulting Org-mode file: the tilde (~) around a word strikes
    it through on GitHub. On GitHub, `...` is the syntax for code (in
    HTML, this is <code> ... </code>.

    #+caption: screenshot from a GitHub Org-mode file submission
    #+attr_html: :width 400px
    [[./img/issue1.png]]

  * Feel free to bring your own laptop to future sessions. If you want
    me to check installation because something did not work, come a
    little earlier or stay a little later.

  * This concludes our "Emacs week". To get more practice in GNU
    Emacs, complete the onboard tutorial (~C-h t~).

  * Solutions to the Org-mode assignment are posted [[https://github.com/birkenkrahe/cc100/tree/main/assignments/org-mode/solutions][here on
    GitHub]]. Note that submissions of programs as Org-mode files should
    always also be accompanied by references and sources.

  * I told you an inaccuracy in class: when rendering the Org-mode
    file on GitHub, the ~#+TITLE~ meta information is displayed as the
    title of the file. If no such header is present, only the ~README~
    file is displayed (with the file name as title).

* w4s8 (01/31/22)

  Lab session - see whiteboards.

* w4s9 (02/02/22)
** Compiler flags

   * Compilers come with a lot of options (check ~gcc --help~)
   * For the assignment, add ~:flags -Wall~ to the header (~gcc~
     option)[fn:1]

** The ~pun.c~ program

   Check the [[glossary]] for details. The output, by the way, does not
   look good on GitHub. 

   #+name: pun
   #+begin_src C :main yes :include stdio.h :results raw :exports both
     printf("To C, or not to C, that is the question.\n");
   #+end_src

   #+RESULTS: pun
   To C, or not to C, that is the question.

   #+name: pun1
   #+begin_src C :results raw :exports both
     #include <stdio.h>

     int main(void)
     {
       printf("To C, or not to C, that is the question.\n");
       return 0;
     }
   #+end_src

   #+RESULTS: pun1
   To C, or not to C, that is the question.

   #+name: newline
   #+begin_src C :main yes :include stdio.h :results raw :exports both
     printf("To C, or not to C,\nthat is the question.\n");
   #+end_src

   #+RESULTS: newline
   To C, or not to C,
   that is the question.

   #+name: smiley
   #+begin_src C :main yes :include stdio.h :results raw
     printf("O         O\n");
     printf("     | \n");
     printf("\n");
     printf(" *       * \n");
     printf("   * * * \n");
   #+end_src

   
** Comments

   #+name: comments
   #+begin_src C :main yes :include stdio.h :results raw :exports both
     /* Comment on a line */
     // Another type of comment on a line
     printf("Nothing to see here.\n");  // on a statement line

     /* You can also comment
        over several lines */
   #+end_src

** Glossary
   <<glossary>>

   | TERM               | EXPLANATION                                        |
   |--------------------+----------------------------------------------------|
   | C program          | Directive + ~main~ function + statements           |
   | Directive          | Pre-processor, e.g. ~#include~ + header            |
   | Header             | Standard library functions, e.g. ~stdio.h~         |
   | Function           | Named series of statements for execution           |
   | Library function   | Pre-defined C function, e.g. for input/output      |
   | Return value       | Returned value computed by a function              |
   | ~main~ function    | Mandatory wrapper function, called automatically   |
   | Status code        | Indicates program termination status, e.g. ~0~     |
   | String literal     | List of characters in quotes, e.g. ~"Hello world"~ |
   | End symbol         | Statements must have it at the end, in C: ~;~      |
   | New-line character | ~\n~ moves the display by one line                 |

* References

  * <<birkenkrahe>> Birkenkrahe (Jan 11, 2022). Interactive shell
    vs. interactive notebook (literate programming demo). [[https://youtu.be/8HJGz3IYoHI][URL:
    youtu.be/8HJGz3IYoHI]].

  * <<gough>> Gough (2004). An Introduction to GCC. [[https://tfetimes.com/wp-content/uploads/2015/09/An_Introduction_to_GCC-Brian_Gough.pdf][URL: tfetimes.com.]]

  * <<koenig>> Koenig (Feb 4, 2020). Meet The Newest Liberal Art: Coding
    [blog]. [[https://www.edsurge.com/news/2020-02-05-meet-the-newest-liberal-art-coding][URL: www.edsurge.com.]]

  * <<lunduke>> Lunduke (June 28,2019). Without a GUI--How to Live Entirely in a
    Terminal [article]. [[https://www.linuxjournal.com/content/without-gui-how-live-entirely-terminal][URL: linuxjournal.com]].

  * <<segger>> Segger(Jan 18, 2022). Off the Charts - The best of our data
    journalism. [[https://view.e.economist.com/?qs=656e8edd261819ad127632bd9fc89d2693ab5b810851ce4bd3c9b136783bf9a66449c77fa31064988ea46b682a0e8efeb56fca106d505a3dcf51d920dc5bcf1b6f2e2e72407034bde705c7cfc6af5ec4][URL: economist.com.]]

  * <<stallman>> Stallman et al (2022). Using the GNU Compiler
    Collection. [[https://gcc.gnu.org/onlinedocs/gcc.pdf][URL: gcc.gnu.org.]]

* Footnotes

[fn:1]From the GCC reference manual ([[stallman][Stallman et al, 2003]]):
#+begin_quote
~-Wall~ enables all the warnings about C constructions that some
users consider questionable, and that are easy to avoid (or modify
to prevent the warning).
#+end_quote
