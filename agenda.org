#+TITLE:CC Agenda
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE: CSC 100 - Spring 2022
#+OPTIONS: toc:1
#+STARTUP: overview hideblocks
#+PROPERTY: header-args:C :main yes :includes <stdio.h>
* README

  This file contains the agenda overview (what I had planned), the
  objectives (what we managed to do) and (much of the) content of each
  taught session of the course. I want to avoid splitting the content
  up over many files - so that you have to navigate as little as
  possible (like a book)!

  The companion file to this file, less structured and with the
  captain's log, is the [[./notes.org][notes.org]] file.

* Welcome to the course - w1s1 (01/12/22)
** Welcome
   #+attr_html: :width 500px
   [[./img/fivearmies.jpg]]

   * Introduction to the course & the lecturer
   * Homework assignment: GitHub Hello World
   * What's next?

** Entry survey ([[https://docs.google.com/forms/d/1OYm9fMBi8LNAlbRSo3hiRzsLL0psOuF7TmyoYj9U4kM/edit#responses][Google Forms]])

   #+attr_html: :width 600px
   #+caption: What's your operating system? (Spring 2022 survey)
   [[./img/os.png]]

** Introduction to the course & the lecturer

   #+attr_html: :width 400px
   [[./img/mb.jpg]]

   * PhD theoretical particle physics / WWW development

   * C/C++ since ca. 1990 (created multigrid library)

   * Professor, [[https://en.wikipedia.org/wiki/Business_informatics#:~:text=Business%20informatics%20(BI)%20is%20a,and%20concepts%20of%20computer%20science.&text=The%20focus%20on%20programming%20and,of%20economics%20and%20information%20technology.][Business Informatics]] @Berlin Univ

   * Visiting Assoc Prof for Data Science @Lyon (2021-23)

   * Syllabus for this course ([[https://lyon.schoology.com/course/5516220826/materials/gp/5523144577][Schoology]])

** Homework assignments week 1 (14-Jan-2022)

   #+attr_html: :width 600px
   [[./img/homework.png]]

   * *GitHub Hello World Exercise ([[https://github.com/birkenkrahe/org/blob/master/FAQ.org#completing-the-github-hello-world-exercise][Info: FAQ]]) - by Friday 14-Jan!*

*** GitHub

**** What is it?

     * Software development platform (like GitLab, BitBucket,
       SourceForge, etc.)
     * Built around Git by Linus Torvalds
     * Bought by Microsoft in 2018 (like OpenAI - home of GPT3)
     * 77 mio users (developers) + 200+ mio software projects
     * AI support (e.g. [[https://copilot.github.com/][GitHub Copilot]] - AI-enabled code generator)

     Watch: "[[https://youtu.be/w3jLJU7DT5E][What is GitHub?]]" (GitHub, 2016)

     #+attr_html: :width 500px
     [[./img/github.gif]]
     /Gif: "So long binder of requirements" Source: GitHub/

**** Why are we using it?

     /Image: Org-mode file in GitHub/
     #+attr_html: :width 700px
     [[./img/org.png]]

     * It's free
     * To host course materials
     * Upload assignments (esp. Emacs Org-files)
     * Discussion
     * Wiki for collaboration
     * Complements Schoology

**** What will you have to do?

     * [[https://github.com][Sign up with GitHub]] - use Lyon Email
     * Pick an available username *using your own first and last name*
     * [[https://docs.github.com/en/get-started/quickstart/hello-world][Complete the "Hello World" exercise]] ([[https://github.com/birkenkrahe/org/blob/master/FAQ.md#completing-the-github-hello-world-exercise][FAQ]])
     * [[https://docs.github.com/en/issues/tracking-your-work-with-issues/creating-an-issue#creating-an-issue-from-a-repository][Create an issue]] from the [[https://github.com/birkenkrahe/cc100/issues][~cc100~ repository]] like in the example
       below (except from your account instead of mine).

     /Image: Issue "Assignment completed"/
     #+attr_html: :width 500px
     [[./img/issue.png]]

     #+begin_quote
     If you do have a GitHub account already, do the exercise anyway
     using your existing account (it takes 10 min)! Make sure you
     let me know what your user name is so that I can add you to my
     repo.
     #+end_quote

**** What else can you do?

     * You can [[https://docs.github.com/en/get-started/quickstart/fork-a-repo][fork]] the [[https://docs.github.com/en/get-started/quickstart/fork-a-repo][~cc100~]] repository
     * You can [[https://docs.github.com/en/account-and-profile/managing-subscriptions-and-notifications-on-github/managing-subscriptions-for-activity-on-github/viewing-your-subscriptions][watch]] the [[https://docs.github.com/en/get-started/quickstart/fork-a-repo][~cc100~]] repository - and set [[https://docs.github.com/en/account-and-profile/managing-subscriptions-and-notifications-on-github/setting-up-notifications/configuring-notifications][~Notifications~]]
       to ~Participating and @mentions~ so that you see my comments
       (see image below).

     #+attr_html: :width 300px
     [[./img/watch.png]]
     /Image: Notifications settings when watching a repository/

     * You can [[https://docs.github.com/en/issues/tracking-your-work-with-issues/creating-an-issue#creating-an-issue-from-a-repository][submit issues]] from the repository (e.g. if you notice
       mistakes or if you want extra information, or to share a link)
     * You can participate in [[https://github.com/birkenkrahe/cc100/discussions][discussions]] (sometimes I will make you)
     * You can add to the [[https://github.com/birkenkrahe/cc100/wiki][wiki]] (e.g. comments and links to interesting
       resources)
     * You can use it as a platform for [[https://docs.github.com/en/issues/trying-out-the-new-projects-experience/about-projects][projects]] or [[https://github.com/features/codespaces][coding]]
     * You can download the [[https://desktop.github.com/][desktop client]] to manage repos on your PC
       (see image below).

     /Image: GitHub desktop client commit/
     #+attr_html: :width 800px
     [[./img/gh.png]]

** What's next?

   #+attr_html: :width 500px
   [[./img/sunflowers.jpg]]

   * See schedule ([[https://github.com/birkenkrahe/cc100/blob/main/schedule.org][GitHub]])
   * Watch online lecture on "Systems" (to be done)
   * Later: online summary (~notes.org~ in [[https://github.com/birkenkrahe/cc100][GitHub]])
   * Sometimes: diary notes (~diary.org~ in [[https://github.com/birkenkrahe/cc100][GitHub]])
   * Class on Friday 14-Jan will be online!
   * Hope to see you at school next Monday!

* Git, GitHub, History of C - w1s2 (01/14/22)

** Overview

   | HOW      | WHAT                                  |
   |----------+---------------------------------------|
   | Review   | [[file:~/Documents/GitHub/org/FAQ.org::Completing the GitHub "hello world" exercise][GitHub Hello World exercise]] (see [[https://github.com/birkenkrahe/org/blob/master/FAQ.org#completing-the-github-hello-world-exercise][FAQ]]) |
   | Lecture  | [[file:1_introduction/README.org::What will you learn?][Introduction to C]]                     |
   | Practice | Install C compiler ([[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-to-install-a-c-compiler-under-windows-and-macos][see FAQ]])          |
   |          | Set PATH environment variable         |
   |          | Test C compiler                       |

** Objectives

   * [X] Review the basics of Git and GitHub

   * [X] Understand what C is, and why you learn it

   * [ ] Install the GNU C and C++ compiler (~gcc~)

   * [ ] Set ~PATH~ environment variable under Windows

   * [ ] Test the C compiler

* Introduction to C and C++ - w2s3 (01/19/22)
** I'm back

   #+caption: "I'm back, baby."
   #+attr_html: :width 300px
   [[./img/back.jpg]]

** Overview

   | HOW      | WHAT                               | TIME |
   |----------+------------------------------------+------|
   | Review   | Quiz on last week's content        | 15'  |
   |          | Quiz: feedback discussion          | 5'   |
   | Lecture  | [[file:1_introduction/README.org::What will you learn?][Introduction to C]] (cont'd)([[https://github.com/birkenkrahe/cc100/tree/main/1_introduction][gh]])     | 10'  |
   |          | [[~/Documents/GitHub/cc100/2_installation/README.org::What are you going to learn?][Installation of tools]] ([[https://github.com/birkenkrahe/cc100/tree/main/2_installation][gh]])         |      |
   | Practice | Install C compiler[fn:1] ([[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-to-install-a-c-compiler-under-windows-and-macos][see FAQ]]) |      |
   |          | Set PATH environment variable      |      |
   |          | Test C compiler                    |      |

   gh = GitHub link

** Objectives

   * [X] Review last week & discuss & get feedback on quiz 1

   * [X] Complete introduction to C (and C++)

   * [ ] Understand installation process (philosophy)

   * [ ] Install the GNU C and C++ compiler (~gcc~)

   * [ ] Set ~PATH~ environment variable under Windows

   * [ ] Test the C compiler

* Install C compiler, set PATH - w2s4 (01/21/22)
** Overview

   | HOW      | WHAT                               | TIME |
   |----------+------------------------------------+------|
   | Lecture  | [[~/Documents/GitHub/cc100/2_installation/README.org::What are you going to learn?][Installation of tools]] ([[https://github.com/birkenkrahe/cc100/tree/main/2_installation][gh]])         |      |
   | Practice | Install C compiler[fn:2] ([[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-to-install-a-c-compiler-under-windows-and-macos][see FAQ]]) |      |
   |          | Test C compiler ~gcc --version~    |      |
   |          | GNU Emacs tutorial in class ([[https://github.com/birkenkrahe/org/blob/master/emacs/tutor.org][gh]])   |      |
   | HOME     | Set PATH environment variable      |      |

   gh = GitHub link

** Objectives

   * [X] Understand installation process (philosophy)

   * [X] Install the GNU C and C++ compiler (~gcc~)

   * [X] Set ~PATH~ environment variable under Windows

   * [X] Test the C compiler

   * [X] GNU Emacs tutorial

* Install GNU Emacs - w3s5 (01/24/22)
** Overview

   |------------+-----------------------------------------------|
   | HOW        | WHAT                                          |
   |------------+-----------------------------------------------|
   | Practice   | Emacs [[https://github.com/birkenkrahe/org/blob/master/emacs/tutor.org][training script]]                         |
   |            | See also [[https://youtube.com/playlist?list=PLwgb17bzeNyiuQtvKtcZ_pvSSoO9ShXv8][video playlist]]                       |
   |------------+-----------------------------------------------|
   | [[https://lyon.schoology.com/assignment/5590403530][Assignment]] | Set ~.emacs~ init file in your home directory |
   |------------+-----------------------------------------------|

** Objectives

   * [X] Work through short tutorial for GNU Emacs

   * [X] Explain Emacs assignment

* Create GNU Emacs Org-mode file - w3s6 (01/26/22)
** Overview

   |------------+-----------------------------------------------------|
   | HOW        | WHAT                                                |
   |------------+-----------------------------------------------------|
   | Practice   | Set ~.emacs~ init file in your home directory       |
   |------------+-----------------------------------------------------|
   | Demo       | Creating Emacs Org-mode with C code and run it      |
   |------------+-----------------------------------------------------|
   | [[https://lyon.schoology.com/assignment/5606518666][Assignment]] | Create Emacs Org-mode file ([[https://github.com/birkenkrahe/cc100/blob/main/assignments/org-mode/README.org][GitHub]])                 |
   |------------+-----------------------------------------------------|

** Objectives

   * [X] Understand Emacs initialization with ~.emacs~

   * [X] Learn how to create an Org-mode file

   * [ ] Run a C program inside Emacs
* GNU Emacs initialization file - w3s7 (01/28/22)

  1) We continue where we left it [[w3s6 (01/26/22)][on Wednesday]]

  2) [[file:~/Documents/GitHub/org/FAQ.org::Fixing the .emacs problem on Windows lab computers][Fixing the .emacs problem]] (FAQ)

  3) Finish [[file:assignments/org-mode/README.org::Creating and running C inside an Org-mode file][Org-mode assignment]] ([[https://github.com/birkenkrahe/cc100/blob/main/assignments/org-mode/README.org][GitHub]])

  4) Submit results [[https://github.com/birkenkrahe/cc100/issues][to GitHub as issue]] (ZIP) - by 11.59PM tonight

* GCC Lab session - w4s8 (01/31/22)

  #+caption: Teaching Emacs on Dagobah
  #+attr_html: :width 400px
  [[./img/yoda.jpg]]

  #+begin_quote
  We will hold a special lab session tomorrow, Monday 31 January
  11-11.50 AM, to sort out any issues related to Emacs or GCC. Bring
  your own PC to the session, or work on a lab desktop. I will spend the
  time going round to make sure that you can

  * Install/ open / use the Emacs editor
  * Create, run and tangle Org-mode files
  * Install / use the C compiler GCC
  * Understand the recent program assignments

  The necessary steps are also demonstrated [[https://www.youtube.com/playlist?list=PLwgb17bzeNygo8GU6SivwwjsQj9QabqAJ][in this tutorial video
  playlist]].

  We will continue with our regular program on Wednesday, 2nd February
  at 11 AM - a short quiz will be available before.
  #+end_quote

  For those who know or can do all of this already: here's a [[https://github.com/birkenkrahe/cc100/blob/main/assignments/org-mode/2nd_assignment.org][second
  challenge]] (with solution) to practice while I sort others out.

* Structure of a C program - w4s9 (02/02/22)
** Overview

   |------------+-----------------------------+---------------------|
   | HOW        | WHAT                        | WHEN                |
   |------------+-----------------------------+---------------------|
   | [[https://lyon.schoology.com/link?a=&path=https%3A%2F%2Fdrive.google.com%2Fdrive%2Ffolders%2F1D0tYkE_bW-7stmbgN4dJlEFyg1DRUch0%3Fusp%3Dsharing][Lecture]]    | C Fundamentals (King ch. 2) |                     |
   |------------+-----------------------------+---------------------|
   | [[https://github.com/birkenkrahe/cc100/blob/main/notes.org#the-punc-program][Practice]]   | Write and execute ~pun.c~   |                     |
   |------------+-----------------------------+---------------------|
   | [[https://lyon.schoology.com/assignment/5624884647][Assignment]] | Write a checkmarks program  | Friday, 4 Feb, 11AM |
   |------------+-----------------------------+---------------------|

** Objectives

   * [X] Understand the basic structure of a C program

   * [X] Write a simple, complete C program (~pun.c~)

   * [X] Submit simple assignment for Friday 4 Feb 11 AM

** Assignment: checkmark program

   Submit program and output as an Org-mode file. It should look like
   this (code block is folded):

   #+caption: Checkmarks solution (code block folded)
   #+attr_html: :width 600px
   [[./img/checkmarks.png]]

* Variable type declarations and assignments -  w5s10 (02/07/22)
** Overview

   |----------+--------------------------------+----------------------|
   | HOW      | WHAT                           | WHEN                 |
   |----------+--------------------------------+----------------------|
   | Review   | [[file:3_basics/README.org::What are you going to learn?][Structure of a program]]         |                      |
   |----------+--------------------------------+----------------------|
   | [[file:3_basics/variables.org][Lecture]]  | C Fundamentals ([[https://lyon.schoology.com/link?a=&path=https%3A%2F%2Fdrive.google.com%2Fdrive%2Ffolders%2F1D0tYkE_bW-7stmbgN4dJlEFyg1DRUch0%3Fusp%3Dsharing][King ch. 2]])    |                      |
   |----------+--------------------------------+----------------------|
   | Practice | Computing the weight of a box  |                      |
   |----------+--------------------------------+----------------------|
   | Test 1   | 10 from Quiz 1-3 + 10 new MPCs | Friday, 11 Feb, 11AM |
   |----------+--------------------------------+----------------------|
** Objectives

   * [X] Understand the framework for the first test

   * [X] Understand variable, data types and type declarations

   * [X] Understand variable assignments

   * [ ] Understand printing formats

   * [ ] Write a program with variable declarations and assignments

   * [ ] Understand printing formats

* Formatting printout -  w5s11 (02/09/22)
** Overview

   |----------+-------------------------------------------+----------------------|
   | HOW      | WHAT                                      | WHEN                 |
   |----------+-------------------------------------------+----------------------|
   | [[file:3_basics/variables.org][Lecture]]  | C Fundamentals ([[https://lyon.schoology.com/link?a=&path=https%3A%2F%2Fdrive.google.com%2Fdrive%2Ffolders%2F1D0tYkE_bW-7stmbgN4dJlEFyg1DRUch0%3Fusp%3Dsharing][King ch. 2]])               |                      |
   |----------+-------------------------------------------+----------------------|
   | Practice | Interactive notebook: ~printf~ formatting |                      |
   |----------+-------------------------------------------+----------------------|
   | Test 1   | 10 from Quiz 1-3 + 10 new MPCs            | Friday, 11 Feb, 11AM |
   |----------+-------------------------------------------+----------------------|
** Objectives


   * [X] Understand printing formats

   * [X] Write a program with variable declarations and assignments

* Test review - w6s12 (02/14/22)
** Objectives

   * [X] Understand test results
   * [X] Know what to do different next time
   * [X] Discuss selected questions and answers

** Test results - stats and plots

   * The results are nothing to write home about - though > 50% means
     that the class passed (on average).
     #+caption: Test 1 results (Schoology)
     #+attr_html: :width 500px
     [[./img/test_1_stats.png]]

   * I am an obsessive fact-checker. When checking the stats with R, I
     find slightly different results:
     #+name: test 1 results
     #+begin_src R :exports both :session :results output
       results <- c(8.07,9.5,9.66,10.21,12.12,12.66,14,14.1,
                    14.75,14.75,14.97,15,15.75,17,19,19.36)
       sd(results)
       summary(results)
     #+end_src

     #+RESULTS: test 1 results
     :
     : [1] 3.288485
     :
     :    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
     :    8.07   11.64   14.43   13.81   15.19   19.36

   * Let's make some plots: histogram, boxplot and density plot. I'dd
     like the histogram and the density plot (a smoothened histogram)
     to peak more to the right, and for the boxplot to be smaller and
     higher up.
     #+name: histogram
     #+begin_src R :exports both :session :results output graphics file :file ./img/test1hist.png
       hist(results, main="Histogram of test 1 results, CSC 100 Spring 2022")
     #+end_src

     #+RESULTS: histogram
     [[file:./img/test1hist.png]]

     #+name: boxplot
     #+begin_src R :exports both :session :results output graphics file :file ./img/test1box.png
       boxplot(results, main="Test 1 results, CSC 100 Spring 2022")
     #+end_src

     #+RESULTS: boxplot
     [[file:./img/test1box.png]]

     #+name: density
     #+begin_src R :exports both :session :results output graphics file :file ./img/test1density.png
       ave <- mean(results)
       d <- density(results)
       plot(d, col="steelblue",main="Test 1 Results CSC 100 Spring 2022")
       abline(v=ave,col="red")
     #+end_src

     #+RESULTS: density
     [[file:./img/test1density.png]]

** Analysis - feedback and action points

   * Test 1 can now be played an unlimited number of times. I have
     added feedback to all new questions.

   * There will not be another paper-based test: the results weren't
     much better than in other courses, and test preparation and
     grading are excruciating if partial credit is given.

   * What surprised me most was that many of you did not use the
     available time.

   * See also: [[https://github.com/birkenkrahe/org/blob/master/diary.org#i-can-teach-it-to-you-but-i-cannot-learn-it-for-you]["I can teach it to you but I cannot learn it for you"]]

   * Questions:
     - How did you study for this test?
     - If you didn't perform well, what will you change?
     - What can I do to help you help yourself?

   * CHANGES TO BE APPLIED BY BIRKENKRAHE (FUTURE QUIZ/TESTS):
     - Fewer choices for the multiple choice
     - Announce if a question has > 1 answer (and how many)

   #+caption: Feynman (via Twitter)
   #+attr_html: :width 500px
   [[./img/feynman.png]]

   * Post-mortem on a couple of questions
     - comment format (last question)
     - ~printf~ format
   #+name: noppeprogram
   #+begin_src C :main yes :includes stdio.h
     /*     one line
      ,*     multi line
      ,*/
     float f = 4.0f;
     printf("hello %.pf", f);
     /* one line
        or multi line
     ,*/
   #+end_src

   #+RESULTS: noppeprogram
   : hello 00000000f

** Test questions and answers

   * We go through all questions together
   * Everybody can contribute an answer
   * Write down questions and ask them now!

** This week (6)

   * Test review
   * Program assignment
   * Defining constants
   * Naming identifiers
   * Reading input

** Program assignment (until Monday 21-Feb, 11AM)

   *Compute the volume of a sphere*

   * Write a program that computes the volume of a sphere with a
     10-meter radius, using the formula $v=4/3\times\pi r^{3}$.
   * Write the fraction $4/3$ as ~4.0f/3.0f~. (Try writing it as 4/3
     and see what happens.)
   * Remember that C does not have an exponentiation operator, so you
     need to write $r^{3}$ as ~r*r*r~.
   * Upload your solution program as a ~.c~ file or as a ~.org~ file
     to Schoology not later than 11 AM on Monday, February 21st. Make
     sure that your program actually runs without errors!
   * Be prepared to present your solution in class.

* Formatting, C constants - w6s13 (02/16/22)
** Objectives

   * [X] Review: be the compiler / function challenge
   * [X] Understand different ways of defining C constants
   * [ ] Practice constant definitions
   * [ ] Understand naming conventions for C programs

** Warming up: be the compiler!

   The output of the program below should be:
   #+begin_example
     : The tax on 200.00 is 35.00, so the grandtotal is 235.00.
   #+end_example
   but instead the output is
   #+begin_example
     : The tax on -1093221452 is 0, so the grandtotal is 1080623104.
   #+end_example
   Can you fix the program [[tax]]?.

   #+name: tax
   #+begin_src C :results output :flags -Wall
     float subtotal;
     int tax;
     float grandtotal;
     float taxrate;

     taxrate = 0.175;
     subtotal = 200;
     tax = subtotal * taxrate;
     grandtotal = subtotal + tax;

     printf("The tax on %d is %d, so the grandtotal is %d\n",
            subtotal, tax, grandtotal);
   #+end_src

   #+RESULTS: tax
   : The tax on 0 is 1080623104, so the grandtotal is 34

** Programming challenge: hello world function

   * Things to remember:
     - You need to declare stuff before you can use it in C.
     - The function definition looks just like ~main~

   * Challenge: Write a function ~hello()~ that prints out ~hello
     world~ when called.

   * You can do this in Emacs in one code block, which contains the
     definition and the function call.

   * This challenge carries extra credit! Submit Org-file via
     email.

   * Solution next week!

* C constants, naming - w6s15 (02/18/22)
** News

   * Invitation for an online data science seminar with the data
     scientist of Stone Ward, Little Rock/Chicago, Matthew Ward: join
     us at 3 pm via Google Meet (see Schoology) - incl INTERNSHIPS

   * Great tips for getting better with Emacs quickly [[https://www.reddit.com/r/emacs/comments/splayn/how_to_start_learning_emacs_my_successful_method/][in this post]].
     See also my [[https://youtube.com/playlist?list=PLwgb17bzeNygo8GU6SivwwjsQj9QabqAJ][Emacs for Beginners YouTube playlist]].
     #+begin_quote
     I started as a rank newbie 14 days ago, and I've learned enough
     to "get started", kind of grok emacs beginner fundamentals and
     simple navigation, and I feel VERY good about my progress. I
     wanted to share how I got to this point. (Note that I happened to
     have the time to read/watch/practice a few hours a day. If I only
     had 30 min per day, it would have taken me a month or two to get
     to this level.)
     #+end_quote

** Objectives

   * [X] Learn more ways of defining C constants
   * [X] Practice constant definitions
   * [X] Understand naming conventions for C program

** Warming up: be the compiler!

   * What's wrong with this program? (It won't even compile.)
     #+name: 021822_err
     #+begin_src C :results output
       #include <stdio.h>
       #define CONST_ 100;

       int main(void) {
         int value = CONST_, newValue;

         newValue = value + 1;

         printf("%d %d %d\n", CONST_, value, newValue);
         return 0;
       }
     #+end_src

     * Answer in the class notes file ~notes.org~.

** Next week

   * Quiz 4 (play me once, then play me often!)
   * Review of the volume/hello programming challenges
   * A new programming challenge!
   * Reading input with ~scanf~ (read me, baby!)
   * Good program layout
   * Arithmetic operators (math, yay!)

* Reading input - w7s16 (02/21/22)
** News

   * [[https://github.com/birkenkrahe/cc100/blob/main/3_basics/README.org][Script is always in GitHub]]
   * [[https://www.offerzen.com/blog/literate-programming-empower-your-writing-with-emacs-org-mode][Literate Programming: Empower Your Writing with Emacs Org-Mode]]

** Objectives

   * [ ] Review programming assignment "volume"
   * [ ] Review programming challenge "hello world function"
   * [ ] New programming exercise "phone number conversion"
   * [ ] Understand reading input (from the command line)
   * [ ] Complete two in-class assignments
   * [ ] See how reading input works in Emacs Org-mode

** Warming up: be the compiler!

   * The following program should print out ~3.0~ but it does not even
     compile! Find all mistakes, fix them and run the program in Emacs!
     #+name: 022122_err
     #+begin_src C
       float int1=1.f, int2=2.f, int;
       printf("%.2f\n"; int = int 1 + int 2);
     #+end_src

** How do class assignments work?

   * In-class assignments are *10%* of your total grade
   * They are labeled *class assignments* in the Schoology gradebook
   * You get the points if you attend and participate *actively*
   * If you check your phone instead, you're *not* active
   * If you could not attend, submit *late*

** [[file:~/Documents/GitHub/admin/spring22/cc100/org/assignments.org::Volume][Programing assignment review]]

   * I left detailed comments for most of you: use them or ask me! Use
     them by modifying your submission accordingly.

   * Future submissions will be properly graded not just for effort
     but for accuracy (this includes following the instructions)

   * Please submit an Org-mode file if you have one so that I don't
     have to check your results line-by-line but can just run it.

   * If you don't have an Org-mode file, submit a C file as a second
     choice.

   * Org-mode meta data were often not correct (file will still run)
    #+begin_example
    #+AUTHOR: name

    #+name: code
    #+begin_src C
    ...
    #+end_src
    #+end_example

   * A couple of programs looked awfully similar (down to errors):
     - There is no need to bend the rules: this is not a rat race!
     - If in doubt about "what is cheating", [[https://github.com/birkenkrahe/cc100/blob/main/syllabus.org#assignments-and-honor-codefn2][check the syllabus]].
     - Add ~#+HONOR: pledged~ to the top of your Org-mode submissions

   * You can find examples and solutions in the class notes later.

   * You can find online REPLs (Read-Eval-Print-Loops) [[https://www.tutorialspoint.com/compile_c_online.php][like this one]]
     to try things out if you're flummoxed by Emacs Org-mode

** [[file:~/Documents/GitHub/admin/spring22/cc100/org/assignments.org::Hello world function][Challenge review]]
** [[file:~/Documents/GitHub/admin/spring22/cc100/org/assignments.org::Phone number conversion][Programming assignment]] (until Monday, 28-Feb, 11 AM)

   * Write a program that prompts the user to enter a telephone number
     in the form ~(xxx) xxx-xxxx~, and then displays the number in the
     form ~xxx.xxx.xxxx~.

   * Example input/output of the first program, ~phone1.c~:
     #+begin_example
     Enter phone number [(xxx) xxx-xxxx]: (870) 456-7890
     You entered 870.456.7890
     #+end_example

   * Write another program that asks for the input format in the form
     ~xxx\xxx\xxxx~, and then displays the number in the form
     ~(xxx)xxx-xxx~.

   * Example input/output of the second program, ~phone2.c~:
     #+begin_example
     Enter phone number [xxx\xxx\xxxx]: 870\456\7890
     You entered (870) 456-7890
     #+end_example

   * Submit one Emacs Org-mode file ~phone.org~ with both programs in
     it as code blocks that can be *tangled* as ~phone1.c~ and
     ~phone2.c~, resp.

   * The header information of your Org-mode file should look like this:
     #+begin_example
       #+TITLE: Phone number conversion
       #+AUTHOR: [your name]
       #+HONOR: pledged
     #+end_example

* References
  * For some of the programming projects, see: King (2011). C
    Programming. W Norton & Co.
* Footnotes

[fn:2]I managed to install GCC on the lab computers and run it inside
GNU Emacs. This is something that you should do at home with your own
computer. I'm going to demonstrate the process in class and I will
also make a short video showing how to do it (for Windows 10).

[fn:1]This requires system admin privileges, which you only have on
your own PC. In the computer lab, I have such principles, and as soon
as I managed to install our tools, you can also use them on the lab
equipment.
