#+TITLE:Org-Mode Coding Assignment 
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:For all courses in Spring 2022
#+STARTUP:overview hideblocks
#+OPTIONS: toc:nil num:nil ^:nil
* Org-mode coding assignment

  This file contains the first ~Org-mode~ assignment, a glossary of
  terms, and a sample solution in the programming language R instead
  of C. The main challenge is not the programming language but
  managing the complexity of writing a "literate" program, which
  includes layout, documentation, source code and result
  elements. Note that the sample solution also lists relevant
  references at the end[fn:1].

** Assignment

   Create an Org-mode file with the following characteristics:

   - A *headline*: ~* My first Org-mode file~.
   - A paragraph of *text* that explains what the following code block
     does. You can break it down with bullets or numbers.
   - A C source *code block*, which looks like this:
   #+begin_example
   #+name: [name]
   #+begin_src [header]
     [statements]
   #+end_src
   #+end_example
   - Replace ~[name]~ by ~hello_world_program~.
   - For the source code block ~[header]~, use the following
     *arguments*:
     #+begin_example
     :main yes
     :includes stdio.h
     :tangle first.c
     :exports both
     :comments both
     :results raw
     #+end_example
   - In the body of the code block, replace the ~[statements]~ by a
     single command preceded by a comment:
     #+begin_example
       // print a string
       puts("hello world");
     #+end_example

   - Save the file as ~YourName.org~ (e.g. ~MarcusBirkenkrahe.org~)
   - Upload the file to [[https://github.com/birkenkrahe/cc100/tree/main/assignments/org-mode][this GitHub repo]]: ~/birkenkrahe/cc100/assignments/org-mode~

** [[https://github.com/birkenkrahe/cc100/blob/main/assignments/org-mode/MarcusBirkenkrahe.org][Example solution in R (not C)]]

   When you look at this solution as a PDF or on GitHub, you will not
   see the *Org-mode* commands delimited by ~#+~. Org-mode files need to be
   edited/viewed in GNU Emacs.

*** My first Org-mode file

    * The function ~str()~ prints all variables (column vectors) of a
      data structure.
    * In the code block, ~str()~ is applied to the built-in data frame
      ~mtcars~.
    * The result shows that ~mtcars~ contains 32 rows (observations)
      of 11 variables.
    * The syntax is not highlighted (language keywords like ~str~ and
      data like ~mtcars~ are not visually distinguished).
    * The code block header has the following arguments:

      | HEADER ARGUMENT      | MEANING                                                |
      |----------------------+--------------------------------------------------------|
      | ~:session *R*~       | Run R in a session in the Emacs buffer ~*R*~           |
      | ~:var DATA="mtcars"~ | Assign ~mtcars~ to the variable ~DATA~                 |
      | ~:results output~    | insert output directly in the org file                 |
      | ~:tangle first.R~    | export source code as R file ~first.R~  ("tangle")     |
      | ~:exports both~      | both result and source code will be exported           |
      | ~:comments both~     | link source code and org files, add comments to source |

    #+name: mtcars
    #+begin_src R :session *R* :var DATA="mtcars" :results output :tangle mtcars.R :exports both :comments both
      ## print structure of mtcars data frame
      str(mtcars)
    #+end_src

    #+RESULTS: mtcars
    #+begin_example

    'data.frame':       32 obs. of  11 variables:
     $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...
     $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...
     $ disp: num  160 160 108 258 360 ...
     $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...
     $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...
     $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...
     $ qsec: num  16.5 17 18.6 19.4 17 ...
     $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...
     $ am  : num  1 1 1 0 0 0 0 0 0 0 ...
     $ gear: num  4 4 4 3 3 3 3 4 4 4 ...
     $ carb: num  4 4 1 1 2 1 4 2 2 4 ...
    #+end_example

*** Executing the program on the command line

    In Emacs - provided the ~R~ software is installed and in the ~PATH~:
    #+begin_example
    M-x eshell
    Rscript mtcars.R
    #+end_example

    #+attr_html: :width 500px
    [[./img/rscriptlight.png]]

*** References
    * ~gcc~, the GNU Compiler Collection. [[https://gcc.gnu.org][URL: gcc.gnu.org.]]
    * ~GitHub~: software hosting platform. [[https://github.com][URL: github.com]].
    * Kernighan, Brian W.; Ritchie, Dennis M. (February 1978). The ~C~
      Programming Language (1st ed.). Englewood Cliffs, NJ: Prentice
      Hall. ISBN 0-13-110163-3. [[https://archive.org/details/TheCProgrammingLanguageFirstEdition][URL: archive.org]].
    * Knuth (1992). Literate Programming. Stanford: CSLI. [[https://www-cs-faculty.stanford.edu/~knuth/lp.html][URL:
      stanford.edu]].
    * ~mtcars~: Motor Trend Car Road Tests. [[https://www.rdocumentation.org/packages/datasets/versions/3.6.2/topics/mtcars][URL: rdocumentation.org]].
    * ~R~ Core Team (2021). R: A language and environment for statistical
      computing. R Foundation for Statistical Computing, Vienna, Austria.
      [[https://r-project.org][URL: r-project.org]].
    * ~str~: Compactly Display the Structure of an Arbitrary R
      Object. [[https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/str][URL: rdocumentation.org]].
    * tecosaur (n.d.). The ~Org~ Manual: 16 Working with Source Code
      [website]. [[https://orgmode.org/manual/Working-with-Source-Code.html][URL: orgmode.org]].

** Glossary

   Your org files and notebooks do not always have to have glossaries,
   but if you have non-trivial information ready to be summarized or
   visualized, you should use tables and graphs to do so.

   | TERM                       | EXPLANATION                                      |
   |----------------------------+--------------------------------------------------|
   | Org-mode headline          | Starts with one ore more ~*~ characters          |
   | Org-mode code block        | An executable (in some language) block of text   |
   | Org-mode code block header | Language and optional arguments                  |
   | Argument                   | Some data passed on for further processing       |
   | Function                   | Algorithm f(x) expecting an argument x           |
   | String                     | Data type representing text                      |
   | Begin/End statement        | Symbol to signal the start/end of a command      |
   | File                       | Storage unit in a computer                       |
   | GitHub repo                | Cloud storage platform                           |
   | Uploading                  | Sending so that file exists locally and remotely |

* Footnotes

[fn:1]The references have URLs, and these URLs have inline links. To
add a link in GNU Emacs Org-mode, use the key sequence ~C-x C-l [link]
RET~ (~org-insert-link). In published Org files, references should be
used in the text as inline citations like in the example below, which
links the first mention of R to a reference.
#+begin_example
  Create an R source block in R (R Core Team, 2021).
#+end_example
This is also why there are so many references - one reference for
every non-trivial concept or software tool used!
