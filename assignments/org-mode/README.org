#+TITLE:Org-Mode Coding Assignment
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE: For CSC100 / Introduction to Programming with C/C++
#+STARTUP:overview hideblocks
#+OPTIONS: toc:nil num:nil ^:nil
* Org-mode coding class assignment

  This file contains the first ~Org-mode~ assignment and a *glossary*
  of terms. The main challenge is not the programming language but
  managing the complexity of writing a "literate" program ([[KN92][Knuth,
  1992]]), which includes layout, documentation, source code and result
  elements. Note that the sample solution also lists relevant
  references at the end[fn:1].

** Assignment
*** Create a working directory

    - Open Emacs and go to the directory ~/ (with ~C-x C-f~)
    - In the ~Dired~ buffer, type ~+~, type the name of the new
      directory ~org-mode~ after the ~/ and press RET.
    - Go to the new directory (with ~C-x C-f~)
    - This is now your ~default-directory~, which you can find out by
      typing ~C-h v default-directory~

*** Create Org-mode file

    Create an Org-mode file named ~first.org~ with ~C-x C-f~ in your
    default-directory ith the following characteristics:

    - Two lines with meta information:

    #+begin_example
    #+TITLE: First Org-file
    #+AUTHOR: [yourname]
    #+end_example
      
    - A *headline*: ~* My first Org-mode file~.
    - A paragraph of *text* that explains what the following code
      block does. Here is an example text that you may copy:

    #+begin_example
    * My first Org-mode file

    This Org-mode file prints ~hello world~ and creates a source file
    ~first.c~ that can be compiled and executed on the command line.
    #+end_example

    (To align text in the buffer, type ~C-M-\~ and ~M-q~.)

    - A C source *code block*, which looks like this:

      #+begin_example
      #+name: [name]
      #+begin_src [header]
        [statements]
      #+end_src
      #+end_example

      - Replace ~[name]~ by ~hello_world_program~.
      - Replace the code block ~[header]~ by the following
        *arguments* (all on the same line, separated by 1 space):

        #+begin_example
	C
	:main yes
        :includes stdio.h
        :tangle first.c
        :exports both
        :comments both
        :results raw
   #+end_example

      - In the body of the code block, replace the ~[statements]~ by
        the following two lines - a comment and a print command:

        #+begin_example
          // print a string
          puts("hello world");
        #+end_example

*** Run Org-mode code block

    - To run the code block, move the cursor anywhere in the block and
      enter ~C-c C-c~[fn:2]
      
    - You should now see this output appear below the code block:

            #+begin_example
      #+RESULTS: hello_world_program
      hello world
      #+end_example

    - Save the file with ~C-x C-s~.

   #+caption: sample solution "first.org"
   #+attr_html: :width 700px
   [[./img/firstorg.png]]
    
*** Create C source code file

    - Move the cursor back into the code block and type ~C-c C-v t~
      (~org-babel-tangle).

    - In the echo area below, you should see the message:
    #+begin_example
    Tangled 1 code block from first.org
    #+end_example

    - Open the ~Dired~ buffer by typing ~C-x d~ and type ~g~ to
      refresh the buffer. You should now see the files ~first.c~ and
      ~first.org~.

   #+caption: sample solution "first.c"
   #+attr_html: :width 700px
   [[./img/firstc.png]]
      
*** Run C source file in the shell

    - Inside Emacs, open a shell with ~C-x eshell RET~

    - At the command prompt (~$~), enter the command ~ls~, and you
      should see all a list of the files in the directory ~org-mode~.

    - Compile the file by typing the following command at the prompt:
      #+begin_example
      gcc -o hello first.c
      #+end_example

    - Enter ~ls~ again, and you should see a new file, ~hello.exe~

    - Run the file by entering ~hello.exe~ at the prompt

    - You should see the same output as before, ~hello world~.

*** Submit your assignment         

    - In the shell, enter the following commands at the prompt to
      rename your files (replace [YourName] by your actual name
      without spaces):

    #+begin_example
    cp first.c [YourName].c
    cp first.org [YourName].org
    #+end_example      

    - Check with ~ls~ that all files are there
      
    - Upload the files ~[YourName].org~ and ~[YourName].c~ to [[https://github.com/birkenkrahe/cc100/tree/main/assignments/org-mode][this
      GitHub repo]]: ~/birkenkrahe/cc100/assignments/org-mode~

   #+caption: sample solution "first.c"
   #+attr_html: :width 700px
   [[./img/eshell.png]]
    
** Glossary

   Your org files and notebooks do not always have to have glossaries,
   but if you have non-trivial information ready to be summarized or
   visualized for a non-expert reader, you should use tables and
   graphs to do so.

   | TERM                       | EXPLANATION                                      |
   |----------------------------+--------------------------------------------------|
   | Org-mode headline          | Starts with one ore more ~*~ characters          |
   | Org-mode code block        | An executable (in some language) block of text   |
   | Org-mode code block header | Language and optional arguments                  |
   | Argument                   | Some data passed on for further processing       |
   | Function                   | Algorithm f(x) expecting an argument x           |
   | String                     | Data type representing text                      |
   | Begin/End statement        | Symbol to signal the start/end of a command      |
   | File                       | Storage unit in a computer                       |
   | GitHub repo                | Cloud storage platform                           |
   | Uploading                  | Sending so that file exists locally and remotely |

** References

   <<gcc>> ~gcc~, the GNU Compiler Collection. [[https://gcc.gnu.org][URL: gcc.gnu.org.]]

   <<github>> ~GitHub~: software hosting platform. [[https://github.com][URL: github.com]].

   <<KR78>> Kernighan, Brian W.; Ritchie, Dennis M. (February 1978). The ~C~ Programming Language (1st ed.). Englewood Cliffs, NJ: Prentice
   Hall. ISBN 0-13-110163-3. [[https://archive.org/details/TheCProgrammingLanguageFirstEdition][URL: archive.org]].

   <<KN92>> Knuth (1992). Literate Programming. Stanford: CSLI. [[https://www-cs-faculty.stanford.edu/~knuth/lp.html][URL:
   stanford.edu]].

   <<Org>> N.a. (n.d.). The ~Org~ Manual: 16 Working with Source Code
   [website]. [[https://orgmode.org/manual/Working-with-Source-Code.html][URL: orgmode.org]].

* Footnotes

[fn:2]If you have more than one code block and want to run them all
from the top, type ~C-c C-v b~. You can find this key sequence with
~C-h f org-babel-execute-buffer~.

[fn:1]The references have URLs, and these URLs have inline links. To
add a link in GNU Emacs Org-mode, use the key sequence ~C-x C-l [link]
RET~ (~org-insert-link~). You need to cite all original sources
authored by others that you use - including software.
