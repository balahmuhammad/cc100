#+TITLE:C Basics
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:CSC100 Introduction to programming in C/C++
#+STARTUP:overview hideblocks
#+OPTIONS: toc:nil
* What are you going to learn?

  This script summarizes and adds to the treatment by King (2008),
  chapter 2, C Fundamentals - see also [[https://docs.google.com/presentation/d/14qvh00aVb_R09_hrQY0EDEK_JLAkgZ0S/edit?usp=sharing&ouid=102963037093118135110&rtpof=true&sd=true][slides (GDrive)]]

  * Program structure
  * Program: Printing a Pun
  * Compiler workflow
  * Shell execution
  * Syntax highlighting
  * Tangling code
  -----
* Program structure

  #+attr_html: :width 600px
  [[./img/structure.png]]

  (Image source: Collingbourne, 2017)

* Hello world program
** "What a Tangled Web We Weave..."

   #+begin_quote
   "Oh, what a tangled web we weave, when first we practice to deceive!"
   (Sir Walter Scott, 1808)
   #+end_quote

   In this section, we're once again running code blocks from within
   Org-mode - with a few new literate programming features:

   * To distinguish (and reference) code blocks, we will name them
     (~#+NAME:~). The name can can then be referenced anywhere
   * To turn the code block into a source code C file (~.c~), we will
     add a ~:tangle FILENAME~ statement to the header
   * To create the tangled (source code) file from a block, use the
     keys ~C-c C-v t~ (~org-babel-tangle~)
   * To create the tangled (source code) from a file (all blocks), use
     the keys ~C-c C-v f~ (~org-babel-tangle-file~)
   * Since source code files should have comments, we add the header
     argument ~:comments both~: now, the most recent org block is used
     as a comment
   * The workflow of "tangling" and "weaving"[fn:4] looks like this:

     #+attr_html: :width 600px
     [[./img/cweb.png]]

     [[https://orgmode.org/manual/Extracting-Source-Code.html][Learn more about extracting source code from Org files.]]

** Hello World Version 1

   * What happens here:
     - A header file (~stdio.h~) is included for input/output
     - A function (~main~) without arguments (~void~) is defined
     - The function returns integer data (~int~)
     - A string (~"..."~) is printed out
     - A new-line is added at the end (~\n~)
     - If successful, the program returns the value ~0~

   #+NAME: hello1
   #+begin_src C :exports both :tangle ./src/hello1.c :comments both
     #include <stdio.h>
     int main(void)
     {
       printf("Hello world\n");
       return 0;
     }
   #+end_src

   #+RESULTS: hello1
   : Hello world

** Hello World Version 2

   The program could also have been written much simpler:
   * This function ~main~ is missing the ~void~ argument, and the
     ~int~ (indicating the type of variable returned - an integer).
   * Alas, in Org-mode, this program will not compile, though outside
     of Org-mode, it will (with a warning). Try it!

   #+NAME: hello2
   #+begin_src C :exports both :tangle ./src/hello2.c :comments both
     #include <stdio.h>
     main()
     {
       printf("Hello world\n");
     }
   #+end_src

   #+RESULTS: hello2

** Hello World Version 3

   The program could also have been written more complicated:
   - ~int argc~ is an integer, or single number - the number of
     arguments that were passed to ~main~
   - ~char **argv~ (or ~char *argv[]~) is a pointer that refers to an
     array of characters - a more complicated data structure.

   #+NAME: hello3
   #+begin_src C :exports both :tangle ./src/hello3.c :comments both
     #include <stdio.h>

     int main(int argc, char **argv)
     {
       printf("hello world\n");
       return 0;
     }
   #+end_src


   #+RESULTS: hello3
   : hello world

* Compiler workflow

  The machine cannot process ~pun.c~ without help. It must

  |------------+---------------------------------------------------------------|
  | Preprocess | The preprocessor acts on lines beginning with ~#~             |
  |------------+---------------------------------------------------------------|
  | Compile    | The compiler translates instructions into object code         |
  |------------+---------------------------------------------------------------|
  | Link       | The linker combines object code and functions like ~printf()~ |
  |------------+---------------------------------------------------------------|
  | Run        | The final ~*.exe~ program is a binary (machine) program       |
  |------------+---------------------------------------------------------------|
  | Debug      | The debugger controls rule violations along the way           |
  |------------+---------------------------------------------------------------|

  I compiled the ~hello.c~ program on a Linux box - the executable is
  called ~hello.out~. Compare the two executables - what do you
  notice?

  [[./img/files.png]]

  | Challenge: are these executables portable?[fn:3] |

* Shell execution

  * You can also save the code in a program ~pun.c~
  * Compile it on the Windows command line or in the Emacs shell:

    | COMMAND            | ACTION                                        |
    |--------------------+-----------------------------------------------|
    | C-x C-f pun.c      | Create C file ~pun.c~                         |
    |                    | Copy block or write code anew in ~pun.c~      |
    | C-x C-s            | Save ~pun.c~                                  |
    | M-x eshell         | start a command line shell in an Emacs buffer |
    | ~gcc -o pun pun.c~ | compile program and create executable         |
    | ~ls~               | list files - you should see ~pun.exe~         |
    | ~pun~              | execute program                               |

    * The shell is an Emacs Lisp simulation of a Linux shell (~bash~)
    * Windows ~PowerShell~ would also work (run with ~./pun[.exe]~)

* Syntax highlighting

  * Notice the slight syntax highlighting difference to ~repl.it~

    #+attr_html: :width 330px
    [[./img/replit.png]]

  * There is no highlighting standard - you should experiment with
    different themes[fn:1]
  * Display line numbers with ~display-line-numbers-mode~, and
    highlight lines with ~hl-line-mode~[fn:2]:

    #+attr_html: :width 600px
    [[./img/pun.png]]

* Comments

  Forgetting to terminate a comment may cause the compiler to ignore
  part of your program - but both syntax highlighting and auto-indent
  in the editor will tip you off:

  #+begin_src C :exports both :main yes :includes stdio.h

    printf("My "); /* forgot to close this comment ...
                      printf("cat ");
                      printf("has ");  /* so it ends here */
    printf("fleas");

  #+end_src

  #+RESULTS:
  : My fleas

  Let's fix this:

  #+begin_src C :exports both :main yes :includes stdio.h

    printf("My "); /* forgot to close this comment */
    printf("cat ");
    printf("has ");  /* so it ends here */
    printf("fleas");

  #+end_src

  #+RESULTS:
  : My cat has fleas

* Concept summary

  * C programs must be compiled and linked
  * Programs consist of directives, functions, and statements
  * C directives begin with a hash mark (~#~)
  * C statements end with a semicolon (~;~)
  * C functions begin and end with parentheses ~{~ and ~}~

* Code summary

  | CODE                          | EXPLANATION                              |
  |-------------------------------+------------------------------------------|
  | ~#include~                    | directive to include other programs      |
  | ~stdio.h~                     | standard input/output header file ([[https://www.tutorialspoint.com/c_standard_library/stdio_h.htm][more]]) |
  | ~main(void)~                  | main function without argument           |
  | ~main(int argc, char **argv)~ | main function with two arguments         |
  | ~return~                      | statement (successful completion)        |
  | ~void~                        | empty argument - no value                |
  | ~printf~                      | printing function                        |
  | ~\n~                          | escape character (new-line)              |
  | ~/* ... */~  ~//...~          | comments                                 |

* Jargon

  | CONCEPT      | EXPLANATION                                  |
  |--------------+----------------------------------------------|
  | Compiler     | translates source code to object code        |
  |--------------+----------------------------------------------|
  | Linker       | translates object code to machine code       |
  |--------------+----------------------------------------------|
  | Syntax       | language rules                               |
  |--------------+----------------------------------------------|
  | Debugger     | checks syntax                                |
  |--------------+----------------------------------------------|
  | Directive    | starts with ~#~, one line only, no delimiter |
  |--------------+----------------------------------------------|
  | Preprocessor | processes directives                         |
  |--------------+----------------------------------------------|
  | Statement    | command to be executed, e.g. ~return~        |
  |--------------+----------------------------------------------|
  | Delimiter    | ends a statement (in C: semicolon - ;)       |
  |--------------+----------------------------------------------|
  | Function     | a rule to compute something with arguments   |
  |--------------+----------------------------------------------|
* What's next

* References
  * Collingbourne (2019). The Little Book of C (Rev. 1.2). Dark Neon.
  * King (2008). C Programming - A Modern Approach. Norton. [[http://knking.com/books/c2/index.html][Online:
    knking.com]].
  * tutorialspoint.com (n.d.). C Library - <stdio.h> [website]. [[https://www.tutorialspoint.com/c_standard_library/stdio_h.htm][URL:
    tutorialspoint.com]].
* Footnotes

[fn:4] In our case, instead of weaving TeX files (~.tex~) to print, we
weave Markdown files (~.md~), or WORD (~*.odt~) files, or we dispense
with the weaving altogether because Org-mode files (equivalent of the
~*.w~ or "web" files) look fine on GitHub.
GitHub.

[fn:3]Executables are the result of compilation for a specific
computer architecture and OS. The ~.exe~ program was compiled for
Windows, the ~.out~ program was compiled for Linux. They will only run
on these OS.

[fn:1]You can find [[https://emacsthemes.com/][themes for GNU Emacs]] here, and install them
using ~M-x package-list-packages~.

[fn:2]If you always want to have line numbers and highlight the line
under the cursor, put these lines in your ~.emacs~ file: and restart
Emacs:
#+begin_src emacs-lisp
  ;; always display line numbers
  (global-display-line-numbers-mode)
  ;; enable global highlighting
  (global-hl-line-mode 1)
#+end_src
